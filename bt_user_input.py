#!/usr/bin/env python
import PySimpleGUI as sg
import cv2
import numpy as np
from datetime import datetime
import pyodbc
import decouple

now = datetime.now()

BlackBlueRed = b''
BlackRedBlue = b''
BlueRedBlack = b'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'

#Example of binary image loading is below:

#In this case using the filename option
FILENAME = r'C:\\scripts\\OpenCV_AI_Competetion\\project\\wildcat.png'          # if you want to use a file instead of data, then use this in Image Element
DISPLAY_TIME_MILLISECONDS = 1000

sg.Window('Window Title', [[sg.Image(FILENAME)]], transparent_color=sg.theme_background_color(), no_titlebar=True, keep_on_top=True).read(timeout=DISPLAY_TIME_MILLISECONDS, close=True)
"""
Demo program that displays a webcam using OpenCV
"""

def main():
    
    sg.theme('Black')
    sz=(10,20)
    title = [[sg.Text('Battery Tracker', size=(30, 1), justification='center', font='Helvetica 20')]]
    col1=[ [sg.Text('Sequence A     Sequence B     Sequence C', size=(40, 1), justification='left', font='Helvetica 10')],
             [sg.Image(BlueRedBlack),sg.Image(BlackRedBlue),sg.Image(BlackBlueRed)],
             [sg.Listbox(values=('A - Blue Red Black', 'B - Black Red Blue', 'C - Black Blue Red'), size=(30,5), key='sequence')],
             [sg.Text('Number of iterations', size=(20, 1), justification='left', font='Helvetica 10')],
             [sg.Listbox(values=('1', '2', '3'), size=(30,5),key='iterations')],
             [sg.Text('Operator', size=(20, 1), justification='left', font='Helvetica 10')],
             [sg.Listbox(values=('Amare','Scott ', 'Seth', 'Zarek'), size=(30,5),key='operator')],
             [sg.Text('Batch Number', size=(20, 1), justification='left', font='Helvetica 10')],
             [sg.Listbox(values=('Batch 111', 'Batch 222', 'Batch 333'), size=(30,5),key='batch')],
             [sg.Button('Apply Settings', size=(20, 1), font='Helvetica 14')],#,, sg.Button('Start Session', size=(20, 1), font='Helvetica 14')],
             [sg.Text('', size=(60, 1), justification='left', font='Helvetica 10',k='-T-')]]
    
    col2=[[sg.Image(filename='', key='image',size=(30, 2))],
            [sg.Button('Record', size=(10, 1), font='Helvetica 14'),sg.Button('Stop', size=(10, 1), font='Any 14'),sg.Button('Exit', size=(10, 1), font='Helvetica 14'),]]

    layout = [[sg.Column(col1, element_justification='t' )]]
              # sg.Column(col2, element_justification='c')]]

    window =sg.Window("Battery Tracker",layout)
        
    # cap = cv2.VideoCapture(0)
    # recording = False

    ##Open an empty file for storing the plan
    
    while True:
        event, values = window.read(timeout=20)

        if event == 'Apply Settings':
            #fileout = open('C:\\scripts\\OpenCV_AI_Competetion\\project\\bt_plan_audit.csv','w')
           # try:
            #print(values)
            operator = values['operator'][0]
            sequence = values['sequence'][0]
            batch = values['batch'][0]
            count = values['iterations'][0]
            cur_datetime = now.strftime("_%d-%m-%Y_%H_%M_%S")
    
            server = 'buckeyewildcats.database.windows.net'
            database = 'batterytracker' 
            username = decouple.config('UserID',default='')
            password = decouple.config('password',default='')

            cnxn = pyodbc.connect('DRIVER={SQL Server};SERVER='+server+';DATABASE='+database+';UID='+username+';PWD='+ password)
            cursor = cnxn.cursor()
            # Insert Dataframe into SQL Server:
            query = """INSERT INTO [dbo].[bt_plan]([ID],[Batch],[Operator],[Sequence],[StartTime],[EndTime],[Iterations])
                     VALUES(NEWID(),'%s','%s','%s',GETDATE(),GETDATE(),%s)""" %(batch,operator,sequence,count)
            #print(query)
            cursor.execute(query)
            cnxn.commit()
            cursor.close()

            vid_script = 'C:\\scripts\\OpenCV_AI_Competetion\\project\\bt_custom_model_spatial.py'
            exec(open(vid_script).read())
                
        if event == 'Exit' or event == sg.WIN_CLOSED:
            break

        # elif event == 'Record':
        #     recording = True
        #     frame_width = int(cap.get(3))
        #     frame_height = int(cap.get(4))
        #     path = "C:\\scripts\\OpenCV_AI_Competetion\\UserInterface\\pySimpleGUI\\outpy.avi"
            
        #     # Define the codec and create VideoWriter object.The output is stored in 'outpy.avi' file.
        #     out = cv2.VideoWriter(path,cv2.VideoWriter_fourcc('M','J','P','G'), 10, (frame_width,frame_height))

        # elif event == 'Stop':
        #     recording = False
        #     img = np.full((480, 640), 255)
        #     # this is faster, shorter and needs less includes
        #     imgbytes = cv2.imencode('.png', img)[1].tobytes()
        #     window['image'].update(data=imgbytes)
        #     # When everything done, release the video capture and video write objects
        #     cap.release()
        #     out.release()

        #     # Closes all the frames
        #     cv2.destroyAllWindows()

        # if recording:
        #     ret, frame = cap.read()
        #     imgbytes = cv2.imencode('.png', frame)[1].tobytes()  # ditto
        #     window['image'].update(data=imgbytes)

        #     out.write(frame)
        
main()
